{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyTekla: Python Library for the Tekla Open API","text":"<p>PyTekla is a Python library that provides a thin wrapper around the Tekla Open API, designed to make the experience more Pythonic. It simplifies the process of working with Tekla Structures software, which is used in the construction industry for modeling and detailing building structures.</p>"},{"location":"#what-is-the-tekla-open-api","title":"What is the Tekla Open API?","text":"<p>The Tekla Open API is an application programming interface that allows developers to interact with the Tekla Structures software. Tekla Structures is used for 3D modeling and detailing of building structures, and is widely used in the construction industry. The API provides a range of tools and functions that allow developers to automate processes, integrate with other software tools, and customize the behavior of the Tekla Structures software.</p>"},{"location":"#what-does-pytekla-do","title":"What does PyTekla do?","text":"<p>PyTekla provides a Pythonic interface to the Tekla Open API, which makes it easier to read and write code that interacts with the software. The library includes a range of classes and functions that simplify common tasks, such as creating new objects, modifying existing objects, and querying the properties of objects. Some of the benefits of using PyTekla include:</p> <ul> <li> <p>Pythonic syntax: PyTekla uses Pythonic syntax, thanks to the use of wrapper classes that encapsulate the .NET classes provided by the Tekla Open API. This makes it easier to read and write code that interacts with the Tekla Open API, using idiomatic Python expressions and conventions.</p> </li> <li> <p>Handy classes and functions: PyTekla includes a range of handy classes and functions that make it easy to work with Tekla Structures objects and streamline common tasks. For example, PyTekla provides functions for converting between .NET types and Python types, making it easy to pass data between Tekla Structures and other Python libraries like NumPy and Pandas. PyTekla also includes wrapper classes for common Tekla Structures objects, which offer extra methods and functionality to facilitate the developer experience.\"</p> </li> <li> <p>Use of CPython and ecosystem of libraries: PyTekla is built on top of CPython, the reference implementation of the Python programming language, and uses the Python.Net library to interact with the .NET libraries provided by the Tekla Open API. This means that PyTekla can take advantage of the rich ecosystem of libraries and tools that are available for Python, such as NumPy and Pandas. With these libraries, it is possible to perform advanced calculations, data manipulation, and data analysis tasks with Tekla Structures data. </p> </li> </ul>"},{"location":"#about-us","title":"About Us","text":"<p>Made with  by Eduardo and Natalia</p>"},{"location":"#support-our-work","title":"Support our work","text":""},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#wrappers","title":"Wrappers","text":""},{"location":"api_reference/#pytekla.wrappers.BaseWrapper","title":"<code>BaseWrapper</code>","text":"<p>A base wrapper for Tekla Structures API objects.</p> <p>This class provides a more Pythonic interface for interacting with Tekla Structures software.</p> <p>When an attribute is accessed, the class uses the <code>__getattr__</code> and <code>__getattribute__</code> methods to convert the attribute to a more Pythonic format.</p> <p>This class also uses the <code>wrap</code> function to automatically convert wrapped objects to their internal Tekla.Structures format when they are set as attributes.</p> <p>When a C# IEnumerator instance is returned, this class converts it to a Python generator. Similarly, when an IDictionary subclass is returned, this class converts it to a Python dictionary.</p>"},{"location":"api_reference/#pytekla.wrappers.BaseWrapper--references","title":"References","text":"<pre><code>https://developer.tekla.com/tekla-structures/api/22/8180\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>class BaseWrapper:\n\"\"\"\n    A base wrapper for Tekla Structures API objects.\n    This class provides a more Pythonic interface for interacting with Tekla Structures software.\n    When an attribute is accessed, the class uses the `__getattr__` and `__getattribute__` methods to convert the attribute to a more Pythonic format.\n    This class also uses the [`wrap`][pytekla.wrappers.wrap] function to automatically convert wrapped objects to their internal Tekla.Structures format when they are set as attributes.\n    When a C# IEnumerator instance is returned, this class converts it to a Python generator. Similarly, when an IDictionary subclass is returned, this class converts it to a Python dictionary.\n    References\n    ----------\n        https://developer.tekla.com/tekla-structures/api/22/8180\n    \"\"\"\ndef __init__(self, tekla_object):\n\"\"\"Initializes the class using a Tekla API object\n        Parameters\n        ----------\n        tekla_object : Tekla.Structures object\n            The object to wrap.\n        \"\"\"\n_set_tekla_object(self, tekla_object)\ndef __getattribute__(self, name):\nresult = object.__getattribute__(self, name)\nif name == \"unwrap\":\nreturn result\nif callable(result):\nreturn _attrs_wrapper(result)\nreturn _process_attr(result)\ndef __getattr__(self, attr):\nto = _get_tekla_object(self)\nreturned_attr = getattr(to, to_pascal_case(attr))\nif callable(returned_attr):\nreturn _attrs_wrapper(returned_attr)\nreturn _process_attr(returned_attr)\ndef __setattr__(self, attr, value):\nif isinstance(value, BaseWrapper):\nvalue = value.unwrap()\nif attr in object.__getattribute__(self, \"__dict__\"):\nreturn object.__setattr__(self, attr, value)\ntry:\nto = _get_tekla_object(self)\nto.__setattr__(to_pascal_case(attr), value)\nexcept AttributeError:\nraise AttributeError(\nf\"'{_get_tekla_object(self)}' has not attribute '{attr}'\"\n)\ndef unwrap(self):\n\"\"\"\n        Get the original Tekla Structures object that is wrapped by this class or subclass instance.\n        Returns\n        -------\n        Tekla.Structures object\n            The original Tekla Structures object.\n        Examples\n        -------\n        &gt;&gt;&gt; obj = BaseWrapper(tekla_object)\n        &gt;&gt;&gt; original_obj = obj.unwrap()\n        \"\"\"\nreturn _get_tekla_object(self)\ndef __repr__(self):\n\"\"\"Return a string representation of the class name of the wrapped Tekla object.\n        Returns\n        -------\n        str\n            The string representation of the class name of the wrapped Tekla object.\n        Examples\n        -------\n        &gt;&gt;&gt; obj = BaseWrapper(tekla_object)\n        &gt;&gt;&gt; str(obj)\n        '&lt;PyTekla&gt; OriginalName'\n        \"\"\"\nclass_name = \"&lt;PyTekla&gt; \" + _get_tekla_object(self).__class__.__name__\nreturn class_name\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.BaseWrapper.__init__","title":"<code>__init__(tekla_object)</code>","text":"<p>Initializes the class using a Tekla API object</p> <p>Parameters:</p> Name Type Description Default <code>tekla_object</code> <code>Tekla.Structures object</code> <p>The object to wrap.</p> required Source code in <code>pytekla\\wrappers.py</code> <pre><code>def __init__(self, tekla_object):\n\"\"\"Initializes the class using a Tekla API object\n    Parameters\n    ----------\n    tekla_object : Tekla.Structures object\n        The object to wrap.\n    \"\"\"\n_set_tekla_object(self, tekla_object)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.BaseWrapper.unwrap","title":"<code>unwrap()</code>","text":"<p>Get the original Tekla Structures object that is wrapped by this class or subclass instance.</p> <p>Returns:</p> Type Description <code>Tekla.Structures object</code> <p>The original Tekla Structures object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = BaseWrapper(tekla_object)\n&gt;&gt;&gt; original_obj = obj.unwrap()\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def unwrap(self):\n\"\"\"\n    Get the original Tekla Structures object that is wrapped by this class or subclass instance.\n    Returns\n    -------\n    Tekla.Structures object\n        The original Tekla Structures object.\n    Examples\n    -------\n    &gt;&gt;&gt; obj = BaseWrapper(tekla_object)\n    &gt;&gt;&gt; original_obj = obj.unwrap()\n    \"\"\"\nreturn _get_tekla_object(self)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.BaseWrapper.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the class name of the wrapped Tekla object.</p> <p>Returns:</p> Type Description <code>str</code> <p>The string representation of the class name of the wrapped Tekla object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = BaseWrapper(tekla_object)\n&gt;&gt;&gt; str(obj)\n'&lt;PyTekla&gt; OriginalName'\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def __repr__(self):\n\"\"\"Return a string representation of the class name of the wrapped Tekla object.\n    Returns\n    -------\n    str\n        The string representation of the class name of the wrapped Tekla object.\n    Examples\n    -------\n    &gt;&gt;&gt; obj = BaseWrapper(tekla_object)\n    &gt;&gt;&gt; str(obj)\n    '&lt;PyTekla&gt; OriginalName'\n    \"\"\"\nclass_name = \"&lt;PyTekla&gt; \" + _get_tekla_object(self).__class__.__name__\nreturn class_name\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.WithUserPropertyMixin","title":"<code>WithUserPropertyMixin</code>","text":"Source code in <code>pytekla\\wrappers.py</code> <pre><code>class WithUserPropertyMixin:\ndef get_user_property(self, property_name, property_type):\n\"\"\"Gets the value of a user property for the given `property_name`.\n        Parameters\n        ----------\n        property_name : str\n            The name of the user property.\n        property_type : type\n            The type of the user property, must be `str`, `int`, or `float`.\n        Returns\n        -------\n        str, int, float or None\n            The value of the user property. None if it was not found.\n        Raises\n        ------\n        TypeError\n            If `property_type` is not `str`, `int`, or `float`.\n        Examples\n        -------\n        &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n        &gt;&gt;&gt; value = model_object_wrapper.get_user_property('property_name', str)\n        \"\"\"\ncheck_property_type(property_type)\nto = _get_tekla_object(self)\nwas_found, value = to.GetUserProperty(property_name, property_type())\nif was_found:\nreturn value\ndef set_user_property(self, property_name, value):\n\"\"\"\n        Sets the user property with the specified name to the specified value.\n        Parameters\n        ----------\n        property_name : str\n            The name of the user property.\n        value : str, int or float\n            The value to set the user property to.\n        Returns\n        -------\n        bool\n            Indicates if the property was set.\n        Raises\n        ------\n        TypeError\n            If the value type is not one of [str, int, float].\n        Examples\n        -------\n        &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n        &gt;&gt;&gt; model_object_wrapper.set_user_property('property_name', value)\n        \"\"\"\ncheck_property_type(type(value))\nto = _get_tekla_object(self)\nreturn to.SetUserProperty(property_name, value)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.WithUserPropertyMixin.get_user_property","title":"<code>get_user_property(property_name, property_type)</code>","text":"<p>Gets the value of a user property for the given <code>property_name</code>.</p> <p>Parameters:</p> Name Type Description Default <code>property_name</code> <code>str</code> <p>The name of the user property.</p> required <code>property_type</code> <code>type</code> <p>The type of the user property, must be <code>str</code>, <code>int</code>, or <code>float</code>.</p> required <p>Returns:</p> Type Description <code>str, int, float or None</code> <p>The value of the user property. None if it was not found.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>property_type</code> is not <code>str</code>, <code>int</code>, or <code>float</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n&gt;&gt;&gt; value = model_object_wrapper.get_user_property('property_name', str)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_user_property(self, property_name, property_type):\n\"\"\"Gets the value of a user property for the given `property_name`.\n    Parameters\n    ----------\n    property_name : str\n        The name of the user property.\n    property_type : type\n        The type of the user property, must be `str`, `int`, or `float`.\n    Returns\n    -------\n    str, int, float or None\n        The value of the user property. None if it was not found.\n    Raises\n    ------\n    TypeError\n        If `property_type` is not `str`, `int`, or `float`.\n    Examples\n    -------\n    &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n    &gt;&gt;&gt; value = model_object_wrapper.get_user_property('property_name', str)\n    \"\"\"\ncheck_property_type(property_type)\nto = _get_tekla_object(self)\nwas_found, value = to.GetUserProperty(property_name, property_type())\nif was_found:\nreturn value\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.WithUserPropertyMixin.set_user_property","title":"<code>set_user_property(property_name, value)</code>","text":"<p>Sets the user property with the specified name to the specified value.</p> <p>Parameters:</p> Name Type Description Default <code>property_name</code> <code>str</code> <p>The name of the user property.</p> required <code>value</code> <code>str, int or float</code> <p>The value to set the user property to.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Indicates if the property was set.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the value type is not one of [str, int, float].</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n&gt;&gt;&gt; model_object_wrapper.set_user_property('property_name', value)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def set_user_property(self, property_name, value):\n\"\"\"\n    Sets the user property with the specified name to the specified value.\n    Parameters\n    ----------\n    property_name : str\n        The name of the user property.\n    value : str, int or float\n        The value to set the user property to.\n    Returns\n    -------\n    bool\n        Indicates if the property was set.\n    Raises\n    ------\n    TypeError\n        If the value type is not one of [str, int, float].\n    Examples\n    -------\n    &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n    &gt;&gt;&gt; model_object_wrapper.set_user_property('property_name', value)\n    \"\"\"\ncheck_property_type(type(value))\nto = _get_tekla_object(self)\nreturn to.SetUserProperty(property_name, value)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper","title":"<code>ModelObjectWrapper</code>","text":"<p>         Bases: <code>BaseWrapper</code>, <code>WithUserPropertyMixin</code></p> <p>This class is a wrapper around Tekla.Structures.Model.ModelObject that provides helper methods for working with ModelObject's properties.</p> <p>Examples:</p> <p>Instantiate a <code>ModelObjectWrapper</code> instance from a Tekla Structures object:</p> <pre><code>&gt;&gt;&gt; from Tekla.Structures.Model import Beam\n&gt;&gt;&gt; from pytekla import ModelObjectWrapper\n&gt;&gt;&gt; wrapped_beam = ModelObjectWrapper(Beam())\n</code></pre> <p>Access the wrapped object's attributes using Python's preferred naming convention:</p> <pre><code>&gt;&gt;&gt; wrapped_beam.name\n'BEAM'\n&gt;&gt;&gt; wrapped_beam.name = \"MY BEAM\"\n&gt;&gt;&gt; wrapped_beam.modify()\n</code></pre> <p>Retrieve the original Tekla Structures object from the <code>ModelObjectWrapper</code> instance:</p> <pre><code>&gt;&gt;&gt; unwrapped_beam = wrapped_beam.unwrap()\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper--references","title":"References","text":"<pre><code>https://developer.tekla.com/tekla-structures/api/22/14416\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>class ModelObjectWrapper(BaseWrapper, WithUserPropertyMixin):\n\"\"\"This class is a wrapper around Tekla.Structures.Model.ModelObject that provides helper methods\n    for working with ModelObject's properties.\n    Examples\n    --------\n    Instantiate a `ModelObjectWrapper` instance from a Tekla Structures object:\n    &gt;&gt;&gt; from Tekla.Structures.Model import Beam\n    &gt;&gt;&gt; from pytekla import ModelObjectWrapper\n    &gt;&gt;&gt; wrapped_beam = ModelObjectWrapper(Beam())\n    Access the wrapped object's attributes using Python's preferred naming convention:\n    &gt;&gt;&gt; wrapped_beam.name\n    'BEAM'\n    &gt;&gt;&gt; wrapped_beam.name = \"MY BEAM\"\n    &gt;&gt;&gt; wrapped_beam.modify()\n    Retrieve the original Tekla Structures object from the `ModelObjectWrapper` instance:\n    &gt;&gt;&gt; unwrapped_beam = wrapped_beam.unwrap()\n    References\n    ----------\n        https://developer.tekla.com/tekla-structures/api/22/14416\n    \"\"\"\nmain_type = ModelObject\ndef __init__(self, tekla_object):\n\"\"\"Initializes the class using a Tekla API ModelObject object\n        Parameters\n        ----------\n        tekla_object : Tekla.Structures object\n            The object to wrap.\n        \"\"\"\nsuper().__init__(tekla_object)\ndef get_report_property(self, property_name, property_type):\n\"\"\"\n        Gets the value of a report property for the given `property_name`.\n        Parameters\n        ----------\n        property_name : str\n            The name of the report property.\n        property_type : type\n            The type of the report property, must be `str`, `int`, or `float`.\n        Returns\n        -------\n        str, int, float or None\n            The value of the report property. None if it was not found.\n        Raises\n        ------\n        TypeError\n            If `property_type` is not `str`, `int`, or `float`.\n        Examples\n        -------\n        &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n        &gt;&gt;&gt; value = model_object_wrapper.get_report_property('property_name', str)\n        \"\"\"\ncheck_property_type(property_type)\nto = _get_tekla_object(self)\nwas_found, value = to.GetReportProperty(property_name, property_type())\nif was_found:\nreturn value\ndef get_all_user_properties(self):\n\"\"\"\n        Get all user properties of the Tekla Model Object as a dictionary.\n        Returns\n        -------\n        dict\n            A dictionary containing the user properties and their values, with keys as property names and values as property values.\n        Examples\n        -------\n        &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n        &gt;&gt;&gt; user_properties = model_object_wrapper.get_all_user_properties()\n        \"\"\"\nhash_table = Hashtable()\nto = _get_tekla_object(self)\nto.GetAllUserProperties(hash_table)\nreturn hash_table\ndef get_multiple_report_properties(\nself, string_names=None, float_names=None, int_names=None\n):\n\"\"\"\n        Get multiple report properties as a dictionary.\n        Parameters\n        ----------\n        string_names : list of str, optional\n            A list of string property names to retrieve.\n        float_names : list of str, optional\n            A list of float property names to retrieve.\n        int_names : list of str, optional\n            A list of integer property names to retrieve.\n        Returns\n        -------\n        dict\n            A dictionary containing the report properties and their values, with keys as property names and values as property values.\n        Examples\n        -------\n        &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n        &gt;&gt;&gt; report_properties = model_object_wrapper.get_multiple_report_properties(\n        ...     string_names=['Property1', 'Property2'],\n        ...     float_names=['Property3', 'Property4'],\n        ...     int_names=['Property5', 'Property6']\n        ... )\n        &gt;&gt;&gt; report_properties\n        {'Property1': 'value1', 'Property2': 'value2', 'Property3': 0.5, 'Property4': 2.0, 'Property5': 1, 'Property6': 3}\n        \"\"\"\nhash_table = Hashtable()\nto = _get_tekla_object(self)\nto.GetAllReportProperties(\niterable_to_net_array_list(string_names or []),\niterable_to_net_array_list(float_names or []),\niterable_to_net_array_list(int_names or []),\nhash_table,\n)\nreturn hash_table\ndef get_dynamic_string_property(self, property_name):\n\"\"\"\n        Get the value of a dynamic string property.\n        Parameters\n        ----------\n        property_name : str\n            The name of the property to retrieve.\n        Returns\n        -------\n        str or None\n            The value of the specified dynamic string property. None if the property was not found.\n        Examples\n        -------\n        &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n        &gt;&gt;&gt; value = model_object_wrapper.get_dynamic_string_property('property_name')\n        \"\"\"\nto = _get_tekla_object(self)\nwas_found, value = to.GetDynamicStringProperty(property_name, str())\nif was_found:\nreturn value\ndef set_multiple_user_properties(self, **kwargs):\n\"\"\"\n        Sets multiple user properties with the specified names to the specified values.\n        Parameters\n        ----------\n        kwargs : dict\n            The names and values of the user properties to set.\n        Returns\n        -------\n        bool\n            Indicates if the properties were set.\n        Examples\n        --------\n        &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n        &gt;&gt;&gt; model_object_wrapper.set_multiple_user_properties(prop1=\"value1\", prop2=123, prop3=3.14)\n        True\n        \"\"\"\nkeys_str, values_str, keys_float, values_float, keys_int, values_int = [\nList[_type]() for _type in (str, str, str, float, str, int)\n]\nfor k, v in kwargs.items():\nmatch v:\ncase str():\nkeys_str.Add(k)\nvalues_str.Add(v)\ncase int():\nkeys_int.Add(k)\nvalues_int.Add(v)\ncase float():\nkeys_float.Add(k)\nvalues_float.Add(v)\nto = _get_tekla_object(self)\nreturn to.SetUserProperties(\nkeys_str, values_str, keys_float, values_float, keys_int, values_int\n)\ndef set_dynamic_string_property(self, property_name, value):\n\"\"\"\n        Sets the dynamic string property with the specified name to the specified value.\n        Parameters\n        ----------\n        property_name : str\n            The name of the dynamic string property.\n        value : str\n            The value to set the dynamic string property to.\n        Returns\n        -------\n        bool\n            Indicates if the property was set.\n        Raises\n        ------\n        TypeError\n            If the value type is not str.\n        Examples\n        -------\n        &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n        &gt;&gt;&gt; model_object_wrapper.set_dynamic_string_property(\"my_property\", \"my_value\")\n        True\n        \"\"\"\nif type(value) != str:\nraise TypeError(\"'value' must be str\")\nto = _get_tekla_object(self)\nreturn to.GetDynamicStringProperty(property_name, value)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper.__init__","title":"<code>__init__(tekla_object)</code>","text":"<p>Initializes the class using a Tekla API ModelObject object</p> <p>Parameters:</p> Name Type Description Default <code>tekla_object</code> <code>Tekla.Structures object</code> <p>The object to wrap.</p> required Source code in <code>pytekla\\wrappers.py</code> <pre><code>def __init__(self, tekla_object):\n\"\"\"Initializes the class using a Tekla API ModelObject object\n    Parameters\n    ----------\n    tekla_object : Tekla.Structures object\n        The object to wrap.\n    \"\"\"\nsuper().__init__(tekla_object)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper.get_report_property","title":"<code>get_report_property(property_name, property_type)</code>","text":"<p>Gets the value of a report property for the given <code>property_name</code>.</p> <p>Parameters:</p> Name Type Description Default <code>property_name</code> <code>str</code> <p>The name of the report property.</p> required <code>property_type</code> <code>type</code> <p>The type of the report property, must be <code>str</code>, <code>int</code>, or <code>float</code>.</p> required <p>Returns:</p> Type Description <code>str, int, float or None</code> <p>The value of the report property. None if it was not found.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>property_type</code> is not <code>str</code>, <code>int</code>, or <code>float</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n&gt;&gt;&gt; value = model_object_wrapper.get_report_property('property_name', str)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_report_property(self, property_name, property_type):\n\"\"\"\n    Gets the value of a report property for the given `property_name`.\n    Parameters\n    ----------\n    property_name : str\n        The name of the report property.\n    property_type : type\n        The type of the report property, must be `str`, `int`, or `float`.\n    Returns\n    -------\n    str, int, float or None\n        The value of the report property. None if it was not found.\n    Raises\n    ------\n    TypeError\n        If `property_type` is not `str`, `int`, or `float`.\n    Examples\n    -------\n    &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n    &gt;&gt;&gt; value = model_object_wrapper.get_report_property('property_name', str)\n    \"\"\"\ncheck_property_type(property_type)\nto = _get_tekla_object(self)\nwas_found, value = to.GetReportProperty(property_name, property_type())\nif was_found:\nreturn value\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper.get_all_user_properties","title":"<code>get_all_user_properties()</code>","text":"<p>Get all user properties of the Tekla Model Object as a dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the user properties and their values, with keys as property names and values as property values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n&gt;&gt;&gt; user_properties = model_object_wrapper.get_all_user_properties()\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_all_user_properties(self):\n\"\"\"\n    Get all user properties of the Tekla Model Object as a dictionary.\n    Returns\n    -------\n    dict\n        A dictionary containing the user properties and their values, with keys as property names and values as property values.\n    Examples\n    -------\n    &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_tekla_object)\n    &gt;&gt;&gt; user_properties = model_object_wrapper.get_all_user_properties()\n    \"\"\"\nhash_table = Hashtable()\nto = _get_tekla_object(self)\nto.GetAllUserProperties(hash_table)\nreturn hash_table\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper.get_multiple_report_properties","title":"<code>get_multiple_report_properties(string_names=None, float_names=None, int_names=None)</code>","text":"<p>Get multiple report properties as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>string_names</code> <code>list of str, optional</code> <p>A list of string property names to retrieve.</p> <code>None</code> <code>float_names</code> <code>list of str, optional</code> <p>A list of float property names to retrieve.</p> <code>None</code> <code>int_names</code> <code>list of str, optional</code> <p>A list of integer property names to retrieve.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the report properties and their values, with keys as property names and values as property values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n&gt;&gt;&gt; report_properties = model_object_wrapper.get_multiple_report_properties(\n...     string_names=['Property1', 'Property2'],\n...     float_names=['Property3', 'Property4'],\n...     int_names=['Property5', 'Property6']\n... )\n&gt;&gt;&gt; report_properties\n{'Property1': 'value1', 'Property2': 'value2', 'Property3': 0.5, 'Property4': 2.0, 'Property5': 1, 'Property6': 3}\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_multiple_report_properties(\nself, string_names=None, float_names=None, int_names=None\n):\n\"\"\"\n    Get multiple report properties as a dictionary.\n    Parameters\n    ----------\n    string_names : list of str, optional\n        A list of string property names to retrieve.\n    float_names : list of str, optional\n        A list of float property names to retrieve.\n    int_names : list of str, optional\n        A list of integer property names to retrieve.\n    Returns\n    -------\n    dict\n        A dictionary containing the report properties and their values, with keys as property names and values as property values.\n    Examples\n    -------\n    &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n    &gt;&gt;&gt; report_properties = model_object_wrapper.get_multiple_report_properties(\n    ...     string_names=['Property1', 'Property2'],\n    ...     float_names=['Property3', 'Property4'],\n    ...     int_names=['Property5', 'Property6']\n    ... )\n    &gt;&gt;&gt; report_properties\n    {'Property1': 'value1', 'Property2': 'value2', 'Property3': 0.5, 'Property4': 2.0, 'Property5': 1, 'Property6': 3}\n    \"\"\"\nhash_table = Hashtable()\nto = _get_tekla_object(self)\nto.GetAllReportProperties(\niterable_to_net_array_list(string_names or []),\niterable_to_net_array_list(float_names or []),\niterable_to_net_array_list(int_names or []),\nhash_table,\n)\nreturn hash_table\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper.get_dynamic_string_property","title":"<code>get_dynamic_string_property(property_name)</code>","text":"<p>Get the value of a dynamic string property.</p> <p>Parameters:</p> Name Type Description Default <code>property_name</code> <code>str</code> <p>The name of the property to retrieve.</p> required <p>Returns:</p> Type Description <code>str or None</code> <p>The value of the specified dynamic string property. None if the property was not found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n&gt;&gt;&gt; value = model_object_wrapper.get_dynamic_string_property('property_name')\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_dynamic_string_property(self, property_name):\n\"\"\"\n    Get the value of a dynamic string property.\n    Parameters\n    ----------\n    property_name : str\n        The name of the property to retrieve.\n    Returns\n    -------\n    str or None\n        The value of the specified dynamic string property. None if the property was not found.\n    Examples\n    -------\n    &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n    &gt;&gt;&gt; value = model_object_wrapper.get_dynamic_string_property('property_name')\n    \"\"\"\nto = _get_tekla_object(self)\nwas_found, value = to.GetDynamicStringProperty(property_name, str())\nif was_found:\nreturn value\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper.set_multiple_user_properties","title":"<code>set_multiple_user_properties(**kwargs)</code>","text":"<p>Sets multiple user properties with the specified names to the specified values.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>The names and values of the user properties to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>bool</code> <p>Indicates if the properties were set.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n&gt;&gt;&gt; model_object_wrapper.set_multiple_user_properties(prop1=\"value1\", prop2=123, prop3=3.14)\nTrue\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def set_multiple_user_properties(self, **kwargs):\n\"\"\"\n    Sets multiple user properties with the specified names to the specified values.\n    Parameters\n    ----------\n    kwargs : dict\n        The names and values of the user properties to set.\n    Returns\n    -------\n    bool\n        Indicates if the properties were set.\n    Examples\n    --------\n    &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n    &gt;&gt;&gt; model_object_wrapper.set_multiple_user_properties(prop1=\"value1\", prop2=123, prop3=3.14)\n    True\n    \"\"\"\nkeys_str, values_str, keys_float, values_float, keys_int, values_int = [\nList[_type]() for _type in (str, str, str, float, str, int)\n]\nfor k, v in kwargs.items():\nmatch v:\ncase str():\nkeys_str.Add(k)\nvalues_str.Add(v)\ncase int():\nkeys_int.Add(k)\nvalues_int.Add(v)\ncase float():\nkeys_float.Add(k)\nvalues_float.Add(v)\nto = _get_tekla_object(self)\nreturn to.SetUserProperties(\nkeys_str, values_str, keys_float, values_float, keys_int, values_int\n)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelObjectWrapper.set_dynamic_string_property","title":"<code>set_dynamic_string_property(property_name, value)</code>","text":"<p>Sets the dynamic string property with the specified name to the specified value.</p> <p>Parameters:</p> Name Type Description Default <code>property_name</code> <code>str</code> <p>The name of the dynamic string property.</p> required <code>value</code> <code>str</code> <p>The value to set the dynamic string property to.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Indicates if the property was set.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the value type is not str.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n&gt;&gt;&gt; model_object_wrapper.set_dynamic_string_property(\"my_property\", \"my_value\")\nTrue\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def set_dynamic_string_property(self, property_name, value):\n\"\"\"\n    Sets the dynamic string property with the specified name to the specified value.\n    Parameters\n    ----------\n    property_name : str\n        The name of the dynamic string property.\n    value : str\n        The value to set the dynamic string property to.\n    Returns\n    -------\n    bool\n        Indicates if the property was set.\n    Raises\n    ------\n    TypeError\n        If the value type is not str.\n    Examples\n    -------\n    &gt;&gt;&gt; model_object_wrapper = ModelObjectWrapper(some_model_object)\n    &gt;&gt;&gt; model_object_wrapper.set_dynamic_string_property(\"my_property\", \"my_value\")\n    True\n    \"\"\"\nif type(value) != str:\nraise TypeError(\"'value' must be str\")\nto = _get_tekla_object(self)\nreturn to.GetDynamicStringProperty(property_name, value)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper","title":"<code>ModelWrapper</code>","text":"<p>         Bases: <code>BaseWrapper</code></p> <p>Wrapper for the Tekla.Structures.Model.Model class.</p> <p>This class provides a convenient interface for interacting with the Tekla Structures Model. It has several methods to get objects from the model.</p>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper--references","title":"References","text":"<pre><code>https://developer.tekla.com/tekla-structures/api/22/14382\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>class ModelWrapper(BaseWrapper):\n\"\"\"Wrapper for the Tekla.Structures.Model.Model class.\n    This class provides a convenient interface for interacting with the Tekla Structures Model.\n    It has several methods to get objects from the model.\n    References\n    ----------\n        https://developer.tekla.com/tekla-structures/api/22/14382\n    \"\"\"\nmain_type = Model\ndef __init__(self, tekla_object=None):\n\"\"\"\n        Create a new ModelWrapper instance.\n        Examples\n        --------\n        &gt;&gt;&gt; from pytekla import ModelWrapper\n        &gt;&gt;&gt; model = ModelWrapper()\n        \"\"\"\nif tekla_object is None:\ntekla_object = Model()\nsuper().__init__(tekla_object)\nobject.__setattr__(self, \"_picker\", UI.Picker())\nto = _get_tekla_object(self)\nobject.__setattr__(self, \"_model_object_selector\", to.GetModelObjectSelector())\nobject.__setattr__(self, \"_ui_model_object_selector\", UI.ModelObjectSelector())\ndef pick_objects(self, object_type=\"object\", prompt=None):\n\"\"\"Pick and element from the model.\n        Parameters\n        ----------\n        object_type : str, optional\n            The object type to select. Must be one of the following options:\n            (object, part, weld, bolt group, reinforcement). By default \"object\".\n        prompt : str, optional\n            The string to display as user guidance. By default None.\n        Raises\n        ------\n        ValueError\n            If the object_type parameter is incorrect.\n        Returns\n        -------\n        generator\n            A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with the selected objects.\n        Examples\n        -------\n        &gt;&gt;&gt; model = ModelWrapper()\n        &gt;&gt;&gt; picked_objects = model.pick_objects(object_type=\"part\", prompt=\"Select parts from the model\")\n        &gt;&gt;&gt; for obj in selected_element:\n        &gt;&gt;&gt;     print(obj)\n        \"\"\"\ntry:\ntekla_obj_type = PICKER_OBJECT_TYPES[object_type.lower()]\nexcept KeyError:\nraise ValueError(\nf\"'object_type' must be one of the following options: {list(PICKER_OBJECT_TYPES.keys())}\"\n)\nprompt_str = prompt or f\"Select one or multiple {object_type}\"\npicker = object.__getattribute__(self, \"_picker\")\nreturn picker.PickObjects(tekla_obj_type, prompt_str)\ndef get_all_objects(self):\n\"\"\"Get all objects in the model.\n        Returns\n        -------\n        generator\n            A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with all the model objects in the current model.\n        Examples\n        -------\n        &gt;&gt;&gt; model = ModelWrapper()\n        &gt;&gt;&gt; objects = model.get_all_objects()\n        &gt;&gt;&gt; for obj in objects:\n        &gt;&gt;&gt;     print(obj)\n        \"\"\"\nselector = object.__getattribute__(self, \"_model_object_selector\")\nreturn selector.GetAllObjects()\ndef get_selected_objects(self):\n\"\"\"Get the currently selected objects in the model.\n        Returns\n        -------\n        generator\n            A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with the currently selected objects in the model.\n        Examples\n        -------\n        &gt;&gt;&gt; model = ModelWrapper()\n        &gt;&gt;&gt; selected_objects = model.get_model_selected_objects()\n        &gt;&gt;&gt; for obj in selected_objects:\n        &gt;&gt;&gt;     print(obj)\n        \"\"\"\nms = object.__getattribute__(self, \"_ui_model_object_selector\")\nreturn ms.GetSelectedObjects()\ndef get_objects_with_types(self, types):\n\"\"\"Get all objects in the model with specified types.\n        Parameters\n        ----------\n        types : iterable of str\n            The object types to retrieve.\n        Returns\n        -------\n        generator\n            A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with all the model objects with the specified types in the current model.\n        Examples\n        -------\n        &gt;&gt;&gt; model = ModelWrapper()\n        &gt;&gt;&gt; objects = model.get_objects_with_types([\"Part\", \"Weld\"])\n        &gt;&gt;&gt; for obj in objects:\n        &gt;&gt;&gt;     print(obj)\n        \"\"\"\ntekla_types = []\nfor _type in types:\ntekla_type = _get_type_by_namespace(\"Model.\" + _type)\ntekla_types.append(clr.GetClrType(tekla_type))\nselector = object.__getattribute__(self, \"_model_object_selector\")\nreturn selector.GetAllObjectsWithType(tekla_types)\ndef get_objects_by_filter(self, model_filter):\n\"\"\"Get objects from model applying an existing filter.\n        Parameters\n        ----------\n        model_filter : str or Tekla.Structures.Filtering.FilterExpression\n            The filter to be applied to the model. It can be a string with the filter name, or a wrapped or unwrapped object of a FilterExpression subclass.\n        Returns\n        -------\n        generator\n            A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with the filtered objects in the model.\n        Examples\n        -------\n        &gt;&gt;&gt; model = ModelWrapper()\n        &gt;&gt;&gt; filtered_objects = model.get_objects_by_filter(\"my filter\")\n        &gt;&gt;&gt; for obj in filtered_objects:\n        &gt;&gt;&gt;     print(obj)\n        \"\"\"\nselector = object.__getattribute__(self, \"_model_object_selector\")\nmatch (model_filter):\ncase str():\nreturn selector.GetObjectsByFilterName(model_filter)\ncase BaseWrapper():\nreturn selector.GetObjectsByFilter(model_filter.unwrap())\ncase _:\nreturn selector.GetObjectsByFilter(model_filter)\ndef get_objects_by_bounding_box(self, min_point_coords, max_point_coords):\n\"\"\"\n        Get objects from the model that are inside a bounding box defined by two points.\n        Parameters\n        ----------\n        min_point_coords : (x: float, y: float, z: float)\n            The minimum point coordinates of the bounding box.\n        max_point_coords : (x: float, y: float, z: float)\n            The maximum point coordinates of the bounding box.\n        Returns\n        -------\n        generator\n            A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with the filtered objects in the model.\n        Examples\n        -------\n        &gt;&gt;&gt; model = ModelWrapper()\n        &gt;&gt;&gt; min_point = (0.0, 0.0, 0.0)\n        &gt;&gt;&gt; max_point = (10.0, 10.0, 10.0)\n        &gt;&gt;&gt; filtered_objects = model.get_objects_by_bounding_box(min_point, max_point)\n        &gt;&gt;&gt; for obj in filtered_objects:\n        &gt;&gt;&gt;     print(obj)\n        \"\"\"\nselector = object.__getattribute__(self, \"_model_object_selector\")\nreturn selector.GetObjectsByBoundingBox(\nPoint(*min_point_coords), Point(*max_point_coords)\n)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper.__init__","title":"<code>__init__(tekla_object=None)</code>","text":"<p>Create a new ModelWrapper instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pytekla import ModelWrapper\n&gt;&gt;&gt; model = ModelWrapper()\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def __init__(self, tekla_object=None):\n\"\"\"\n    Create a new ModelWrapper instance.\n    Examples\n    --------\n    &gt;&gt;&gt; from pytekla import ModelWrapper\n    &gt;&gt;&gt; model = ModelWrapper()\n    \"\"\"\nif tekla_object is None:\ntekla_object = Model()\nsuper().__init__(tekla_object)\nobject.__setattr__(self, \"_picker\", UI.Picker())\nto = _get_tekla_object(self)\nobject.__setattr__(self, \"_model_object_selector\", to.GetModelObjectSelector())\nobject.__setattr__(self, \"_ui_model_object_selector\", UI.ModelObjectSelector())\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper.pick_objects","title":"<code>pick_objects(object_type='object', prompt=None)</code>","text":"<p>Pick and element from the model.</p> <p>Parameters:</p> Name Type Description Default <code>object_type</code> <code>str, optional</code> <p>The object type to select. Must be one of the following options: (object, part, weld, bolt group, reinforcement). By default \"object\".</p> <code>'object'</code> <code>prompt</code> <code>str, optional</code> <p>The string to display as user guidance. By default None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the object_type parameter is incorrect.</p> <p>Returns:</p> Type Description <code>generator</code> <p>A generator of <code>ModelObjectWrapper</code> objects with the selected objects.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = ModelWrapper()\n&gt;&gt;&gt; picked_objects = model.pick_objects(object_type=\"part\", prompt=\"Select parts from the model\")\n&gt;&gt;&gt; for obj in selected_element:\n&gt;&gt;&gt;     print(obj)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def pick_objects(self, object_type=\"object\", prompt=None):\n\"\"\"Pick and element from the model.\n    Parameters\n    ----------\n    object_type : str, optional\n        The object type to select. Must be one of the following options:\n        (object, part, weld, bolt group, reinforcement). By default \"object\".\n    prompt : str, optional\n        The string to display as user guidance. By default None.\n    Raises\n    ------\n    ValueError\n        If the object_type parameter is incorrect.\n    Returns\n    -------\n    generator\n        A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with the selected objects.\n    Examples\n    -------\n    &gt;&gt;&gt; model = ModelWrapper()\n    &gt;&gt;&gt; picked_objects = model.pick_objects(object_type=\"part\", prompt=\"Select parts from the model\")\n    &gt;&gt;&gt; for obj in selected_element:\n    &gt;&gt;&gt;     print(obj)\n    \"\"\"\ntry:\ntekla_obj_type = PICKER_OBJECT_TYPES[object_type.lower()]\nexcept KeyError:\nraise ValueError(\nf\"'object_type' must be one of the following options: {list(PICKER_OBJECT_TYPES.keys())}\"\n)\nprompt_str = prompt or f\"Select one or multiple {object_type}\"\npicker = object.__getattribute__(self, \"_picker\")\nreturn picker.PickObjects(tekla_obj_type, prompt_str)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper.get_all_objects","title":"<code>get_all_objects()</code>","text":"<p>Get all objects in the model.</p> <p>Returns:</p> Type Description <code>generator</code> <p>A generator of <code>ModelObjectWrapper</code> objects with all the model objects in the current model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = ModelWrapper()\n&gt;&gt;&gt; objects = model.get_all_objects()\n&gt;&gt;&gt; for obj in objects:\n&gt;&gt;&gt;     print(obj)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_all_objects(self):\n\"\"\"Get all objects in the model.\n    Returns\n    -------\n    generator\n        A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with all the model objects in the current model.\n    Examples\n    -------\n    &gt;&gt;&gt; model = ModelWrapper()\n    &gt;&gt;&gt; objects = model.get_all_objects()\n    &gt;&gt;&gt; for obj in objects:\n    &gt;&gt;&gt;     print(obj)\n    \"\"\"\nselector = object.__getattribute__(self, \"_model_object_selector\")\nreturn selector.GetAllObjects()\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper.get_selected_objects","title":"<code>get_selected_objects()</code>","text":"<p>Get the currently selected objects in the model.</p> <p>Returns:</p> Type Description <code>generator</code> <p>A generator of <code>ModelObjectWrapper</code> objects with the currently selected objects in the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = ModelWrapper()\n&gt;&gt;&gt; selected_objects = model.get_model_selected_objects()\n&gt;&gt;&gt; for obj in selected_objects:\n&gt;&gt;&gt;     print(obj)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_selected_objects(self):\n\"\"\"Get the currently selected objects in the model.\n    Returns\n    -------\n    generator\n        A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with the currently selected objects in the model.\n    Examples\n    -------\n    &gt;&gt;&gt; model = ModelWrapper()\n    &gt;&gt;&gt; selected_objects = model.get_model_selected_objects()\n    &gt;&gt;&gt; for obj in selected_objects:\n    &gt;&gt;&gt;     print(obj)\n    \"\"\"\nms = object.__getattribute__(self, \"_ui_model_object_selector\")\nreturn ms.GetSelectedObjects()\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper.get_objects_with_types","title":"<code>get_objects_with_types(types)</code>","text":"<p>Get all objects in the model with specified types.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>iterable of str</code> <p>The object types to retrieve.</p> required <p>Returns:</p> Type Description <code>generator</code> <p>A generator of <code>ModelObjectWrapper</code> objects with all the model objects with the specified types in the current model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = ModelWrapper()\n&gt;&gt;&gt; objects = model.get_objects_with_types([\"Part\", \"Weld\"])\n&gt;&gt;&gt; for obj in objects:\n&gt;&gt;&gt;     print(obj)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_objects_with_types(self, types):\n\"\"\"Get all objects in the model with specified types.\n    Parameters\n    ----------\n    types : iterable of str\n        The object types to retrieve.\n    Returns\n    -------\n    generator\n        A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with all the model objects with the specified types in the current model.\n    Examples\n    -------\n    &gt;&gt;&gt; model = ModelWrapper()\n    &gt;&gt;&gt; objects = model.get_objects_with_types([\"Part\", \"Weld\"])\n    &gt;&gt;&gt; for obj in objects:\n    &gt;&gt;&gt;     print(obj)\n    \"\"\"\ntekla_types = []\nfor _type in types:\ntekla_type = _get_type_by_namespace(\"Model.\" + _type)\ntekla_types.append(clr.GetClrType(tekla_type))\nselector = object.__getattribute__(self, \"_model_object_selector\")\nreturn selector.GetAllObjectsWithType(tekla_types)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper.get_objects_by_filter","title":"<code>get_objects_by_filter(model_filter)</code>","text":"<p>Get objects from model applying an existing filter.</p> <p>Parameters:</p> Name Type Description Default <code>model_filter</code> <code>str or Tekla.Structures.Filtering.FilterExpression</code> <p>The filter to be applied to the model. It can be a string with the filter name, or a wrapped or unwrapped object of a FilterExpression subclass.</p> required <p>Returns:</p> Type Description <code>generator</code> <p>A generator of <code>ModelObjectWrapper</code> objects with the filtered objects in the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = ModelWrapper()\n&gt;&gt;&gt; filtered_objects = model.get_objects_by_filter(\"my filter\")\n&gt;&gt;&gt; for obj in filtered_objects:\n&gt;&gt;&gt;     print(obj)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_objects_by_filter(self, model_filter):\n\"\"\"Get objects from model applying an existing filter.\n    Parameters\n    ----------\n    model_filter : str or Tekla.Structures.Filtering.FilterExpression\n        The filter to be applied to the model. It can be a string with the filter name, or a wrapped or unwrapped object of a FilterExpression subclass.\n    Returns\n    -------\n    generator\n        A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with the filtered objects in the model.\n    Examples\n    -------\n    &gt;&gt;&gt; model = ModelWrapper()\n    &gt;&gt;&gt; filtered_objects = model.get_objects_by_filter(\"my filter\")\n    &gt;&gt;&gt; for obj in filtered_objects:\n    &gt;&gt;&gt;     print(obj)\n    \"\"\"\nselector = object.__getattribute__(self, \"_model_object_selector\")\nmatch (model_filter):\ncase str():\nreturn selector.GetObjectsByFilterName(model_filter)\ncase BaseWrapper():\nreturn selector.GetObjectsByFilter(model_filter.unwrap())\ncase _:\nreturn selector.GetObjectsByFilter(model_filter)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.ModelWrapper.get_objects_by_bounding_box","title":"<code>get_objects_by_bounding_box(min_point_coords, max_point_coords)</code>","text":"<p>Get objects from the model that are inside a bounding box defined by two points.</p> <p>Parameters:</p> Name Type Description Default <code>min_point_coords</code> <code>(x</code> <p>The minimum point coordinates of the bounding box.</p> required <p>max_point_coords : (x: float, y: float, z: float)     The maximum point coordinates of the bounding box.</p> <p>Returns:</p> Type Description <code>generator</code> <p>A generator of <code>ModelObjectWrapper</code> objects with the filtered objects in the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = ModelWrapper()\n&gt;&gt;&gt; min_point = (0.0, 0.0, 0.0)\n&gt;&gt;&gt; max_point = (10.0, 10.0, 10.0)\n&gt;&gt;&gt; filtered_objects = model.get_objects_by_bounding_box(min_point, max_point)\n&gt;&gt;&gt; for obj in filtered_objects:\n&gt;&gt;&gt;     print(obj)\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_objects_by_bounding_box(self, min_point_coords, max_point_coords):\n\"\"\"\n    Get objects from the model that are inside a bounding box defined by two points.\n    Parameters\n    ----------\n    min_point_coords : (x: float, y: float, z: float)\n        The minimum point coordinates of the bounding box.\n    max_point_coords : (x: float, y: float, z: float)\n        The maximum point coordinates of the bounding box.\n    Returns\n    -------\n    generator\n        A generator of [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper] objects with the filtered objects in the model.\n    Examples\n    -------\n    &gt;&gt;&gt; model = ModelWrapper()\n    &gt;&gt;&gt; min_point = (0.0, 0.0, 0.0)\n    &gt;&gt;&gt; max_point = (10.0, 10.0, 10.0)\n    &gt;&gt;&gt; filtered_objects = model.get_objects_by_bounding_box(min_point, max_point)\n    &gt;&gt;&gt; for obj in filtered_objects:\n    &gt;&gt;&gt;     print(obj)\n    \"\"\"\nselector = object.__getattribute__(self, \"_model_object_selector\")\nreturn selector.GetObjectsByBoundingBox(\nPoint(*min_point_coords), Point(*max_point_coords)\n)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.DrawingDbObjectWrapper","title":"<code>DrawingDbObjectWrapper</code>","text":"<p>         Bases: <code>BaseWrapper</code>, <code>WithUserPropertyMixin</code></p> <p>A wrapper class for Tekla.Structures.Drawing.DataBaseObject subclasses.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pytekla import DrawingDbOjectWrapper\n&gt;&gt;&gt; drawing_wrapper = DrawingDbOjectWrapper(\"Drawing.GADrawing\")\n&gt;&gt;&gt; drawing_wrapper.set_user_property('property_name', 'property_value')\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.DrawingDbObjectWrapper--references","title":"References","text":"<pre><code>https://developer.tekla.com/tekla-structures/api/22/10404\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>class DrawingDbObjectWrapper(BaseWrapper, WithUserPropertyMixin):\n\"\"\"\n    A wrapper class for Tekla.Structures.Drawing.DataBaseObject subclasses.\n    Examples\n    --------\n    &gt;&gt;&gt; from pytekla import DrawingDbOjectWrapper\n    &gt;&gt;&gt; drawing_wrapper = DrawingDbOjectWrapper(\"Drawing.GADrawing\")\n    &gt;&gt;&gt; drawing_wrapper.set_user_property('property_name', 'property_value')\n    References\n    ----------\n        https://developer.tekla.com/tekla-structures/api/22/10404\n    \"\"\"\nmain_type = DatabaseObject\ndef get_all_user_properties(self):\n\"\"\"\n        Return a dictionary containing all of the user-defined properties associated\n        with this DatabaseObject object.\n        Returns\n        -------\n        dict\n            A dictionary containing the user-defined properties, where the keys are\n            the names of the properties and the values are their corresponding values.\n        Notes\n        -----\n        This method retrieves all of the user-defined properties associated with this\n        DatabaseObject object, regardless of their data type. The properties are returned as a\n        dictionary, where the keys are the property names and the values are their\n        corresponding values.\n        Examples\n        --------\n        &gt;&gt;&gt; from pytekla import DrawingWrapper\n        &gt;&gt;&gt; drawing_wrapper = DrawingWrapper(\"GADrawing\")\n        &gt;&gt;&gt; user_props = drawing_wrapper.get_all_user_properties()\n        &gt;&gt;&gt; user_props\n        {'property1': 'value1', 'property2': 42, 'property3': 3.14}\n        \"\"\"\nto = _get_tekla_object(self)\n_, string_dict = to.GetStringUserProperties(Dictionary[String, String]())\n_, int_dict = to.GetIntegerUserProperties(Dictionary[String, Int32]())\n_, float_dict = to.GetDoubleUserProperties(Dictionary[String, Double]())\n# it's easier to process the result as a Python dict\nfinal_dict = {}\nfor net_dict in (string_dict, int_dict, float_dict):\nfinal_dict |= net_idictionary_to_dict(net_dict)\nreturn final_dict\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.DrawingDbObjectWrapper.get_all_user_properties","title":"<code>get_all_user_properties()</code>","text":"<p>Return a dictionary containing all of the user-defined properties associated with this DatabaseObject object.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the user-defined properties, where the keys are the names of the properties and the values are their corresponding values.</p>"},{"location":"api_reference/#pytekla.wrappers.DrawingDbObjectWrapper.get_all_user_properties--notes","title":"Notes","text":"<p>This method retrieves all of the user-defined properties associated with this DatabaseObject object, regardless of their data type. The properties are returned as a dictionary, where the keys are the property names and the values are their corresponding values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pytekla import DrawingWrapper\n&gt;&gt;&gt; drawing_wrapper = DrawingWrapper(\"GADrawing\")\n&gt;&gt;&gt; user_props = drawing_wrapper.get_all_user_properties()\n&gt;&gt;&gt; user_props\n{'property1': 'value1', 'property2': 42, 'property3': 3.14}\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_all_user_properties(self):\n\"\"\"\n    Return a dictionary containing all of the user-defined properties associated\n    with this DatabaseObject object.\n    Returns\n    -------\n    dict\n        A dictionary containing the user-defined properties, where the keys are\n        the names of the properties and the values are their corresponding values.\n    Notes\n    -----\n    This method retrieves all of the user-defined properties associated with this\n    DatabaseObject object, regardless of their data type. The properties are returned as a\n    dictionary, where the keys are the property names and the values are their\n    corresponding values.\n    Examples\n    --------\n    &gt;&gt;&gt; from pytekla import DrawingWrapper\n    &gt;&gt;&gt; drawing_wrapper = DrawingWrapper(\"GADrawing\")\n    &gt;&gt;&gt; user_props = drawing_wrapper.get_all_user_properties()\n    &gt;&gt;&gt; user_props\n    {'property1': 'value1', 'property2': 42, 'property3': 3.14}\n    \"\"\"\nto = _get_tekla_object(self)\n_, string_dict = to.GetStringUserProperties(Dictionary[String, String]())\n_, int_dict = to.GetIntegerUserProperties(Dictionary[String, Int32]())\n_, float_dict = to.GetDoubleUserProperties(Dictionary[String, Double]())\n# it's easier to process the result as a Python dict\nfinal_dict = {}\nfor net_dict in (string_dict, int_dict, float_dict):\nfinal_dict |= net_idictionary_to_dict(net_dict)\nreturn final_dict\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.DrawingHandlerWrapper","title":"<code>DrawingHandlerWrapper</code>","text":"<p>         Bases: <code>BaseWrapper</code></p> <p>A wrapper class for Tekla.Structures.Drawing.DrawingHandler.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n&gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n&gt;&gt;&gt; drawings = list(drawing_handler.get_drawings())\n&gt;&gt;&gt; active_drawing = drawing_handler.get_active_drawing()\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.DrawingHandlerWrapper--references","title":"References","text":"<pre><code>https://developer.tekla.com/tekla-structures/api/22/10647\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>class DrawingHandlerWrapper(BaseWrapper):\n\"\"\"\n    A wrapper class for Tekla.Structures.Drawing.DrawingHandler.\n    Examples\n    --------\n    &gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n    &gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n    &gt;&gt;&gt; drawings = list(drawing_handler.get_drawings())\n    &gt;&gt;&gt; active_drawing = drawing_handler.get_active_drawing()\n    References\n    ----------\n        https://developer.tekla.com/tekla-structures/api/22/10647\n    \"\"\"\nmain_type = DrawingHandler\ndef __init__(self, tekla_object=None):\n\"\"\"\n        Create a new DrawingHandlerWrapper instance.\n        Examples\n        --------\n        &gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n        &gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n        \"\"\"\nif tekla_object is None:\ntekla_object = DrawingHandler()\nsuper().__init__(tekla_object)\ndef get_drawings(self):\n\"\"\"\n        Generate all of the drawing objects in the Tekla model.\n        Returns\n        -------\n        generator\n            A generator of [`DrawingDbObjectWrapper`][pytekla.wrappers.DrawingDbObjectWrapper] objects.\n        Examples\n        --------\n        &gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n        &gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n        &gt;&gt;&gt; drawings = list(drawing_handler.get_drawings())\n        \"\"\"\nto = _get_tekla_object(self)\nreturn to.GetDrawings()\ndef get_active_drawing(self):\n\"\"\"\n        Return the active drawing object, if one is currently selected.\n        Returns\n        -------\n        DrawingDbObjectWrapper or None\n            A DrawingWrapper object for the currently active drawing, or None if\n            no drawing is currently active.\n        Examples\n        --------\n        &gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n        &gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n        &gt;&gt;&gt; active_drawing = drawing_handler.get_active_drawing()\n        \"\"\"\nto = _get_tekla_object(self)\nactive_drawing = to.GetActiveDrawing()\nif active_drawing is not None:\nreturn active_drawing\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.DrawingHandlerWrapper.__init__","title":"<code>__init__(tekla_object=None)</code>","text":"<p>Create a new DrawingHandlerWrapper instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n&gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def __init__(self, tekla_object=None):\n\"\"\"\n    Create a new DrawingHandlerWrapper instance.\n    Examples\n    --------\n    &gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n    &gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n    \"\"\"\nif tekla_object is None:\ntekla_object = DrawingHandler()\nsuper().__init__(tekla_object)\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.DrawingHandlerWrapper.get_drawings","title":"<code>get_drawings()</code>","text":"<p>Generate all of the drawing objects in the Tekla model.</p> <p>Returns:</p> Type Description <code>generator</code> <p>A generator of <code>DrawingDbObjectWrapper</code> objects.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n&gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n&gt;&gt;&gt; drawings = list(drawing_handler.get_drawings())\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_drawings(self):\n\"\"\"\n    Generate all of the drawing objects in the Tekla model.\n    Returns\n    -------\n    generator\n        A generator of [`DrawingDbObjectWrapper`][pytekla.wrappers.DrawingDbObjectWrapper] objects.\n    Examples\n    --------\n    &gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n    &gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n    &gt;&gt;&gt; drawings = list(drawing_handler.get_drawings())\n    \"\"\"\nto = _get_tekla_object(self)\nreturn to.GetDrawings()\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.DrawingHandlerWrapper.get_active_drawing","title":"<code>get_active_drawing()</code>","text":"<p>Return the active drawing object, if one is currently selected.</p> <p>Returns:</p> Type Description <code>DrawingDbObjectWrapper or None</code> <p>A DrawingWrapper object for the currently active drawing, or None if no drawing is currently active.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n&gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n&gt;&gt;&gt; active_drawing = drawing_handler.get_active_drawing()\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def get_active_drawing(self):\n\"\"\"\n    Return the active drawing object, if one is currently selected.\n    Returns\n    -------\n    DrawingDbObjectWrapper or None\n        A DrawingWrapper object for the currently active drawing, or None if\n        no drawing is currently active.\n    Examples\n    --------\n    &gt;&gt;&gt; from pytekla import DrawingHandlerWrapper\n    &gt;&gt;&gt; drawing_handler = DrawingHandlerWrapper()\n    &gt;&gt;&gt; active_drawing = drawing_handler.get_active_drawing()\n    \"\"\"\nto = _get_tekla_object(self)\nactive_drawing = to.GetActiveDrawing()\nif active_drawing is not None:\nreturn active_drawing\n</code></pre>"},{"location":"api_reference/#pytekla.wrappers.wrap","title":"<code>wrap(some_object, *args, detect_types=True)</code>","text":"<p>Wrap the given object with a suitable wrapper class.</p> <p>Parameters:</p> Name Type Description Default <code>some_object</code> <code>object</code> <p>The object to wrap.</p> required <code>args</code> <p>Any values that you want to pass to the wrapped object to instanciate it.</p> <code>()</code> <code>detect_types</code> <code>bool, optional</code> <p>Whether to automatically detect the type of the object and wrap it with an appropriate class. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>object</code> <p>The wrapped object.</p>"},{"location":"api_reference/#pytekla.wrappers.wrap--notes","title":"Notes","text":"<p>This function checks if the given object is a class and returns it unchanged if so. Otherwise, if <code>detect_types</code> is True, it attempts to determine the type using the namescape path of the object and wrap it with an appropriate class. If the object is not a string will try to wrap it with an appropriate class. If the object is not of a known type, it is returned unchanged.</p> <p>The possible wrapper classes are:</p> <ul> <li> <p><code>BaseWrapper</code>: The base wrapper class that other wrappers inherit from. Can wrap any object in the Tekla.Structures namespace.</p> </li> <li> <p><code>ModelObjectWrapper</code>: A wrapper for Tekla.Structures.Model.ModelObject subclasses instances.</p> </li> <li> <p><code>ModelWrapper</code>: A wrapper for Tekla.Structures.Model.Model instances.</p> </li> <li> <p><code>DrawingDbObjectWrapper</code>: A wrapper for Tekla.Structures.Drawing.DatabaseObject subclasses instances.</p> </li> <li> <p><code>DrawingHandlerWrapper</code>: A wrapper for Tekla.Structures.Drawing.DrawingHandler instances.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; wrapped_obj = wrap(\"Model.Model\")\n&gt;&gt;&gt; # ModelWrapper instance\n</code></pre> <pre><code>&gt;&gt;&gt; wrapped_obj = wrap(\"Model.Beam\")\n&gt;&gt;&gt; # ModelObjectWrapper\n</code></pre> <pre><code>&gt;&gt;&gt; from Tekla.Structures.Model import Beam\n&gt;&gt;&gt; wrapped_obj = wrap(Beam())\n&gt;&gt;&gt; # ModelObjectWrapper\n</code></pre> Source code in <code>pytekla\\wrappers.py</code> <pre><code>def wrap(some_object, *args, detect_types=True):\n\"\"\"\n    Wrap the given object with a suitable wrapper class.\n    Parameters\n    ----------\n    some_object : object\n        The object to wrap.\n    args: object\n        Any values that you want to pass to the wrapped object to instanciate it.\n    detect_types : bool, optional\n        Whether to automatically detect the type of the object and wrap it with an appropriate class.\n        Defaults to True.\n    Returns\n    -------\n    object\n        The wrapped object.\n    Notes\n    -----\n    This function checks if the given object is a class and returns it unchanged if so. Otherwise, if\n    `detect_types` is True, it attempts to determine the type using the namescape path of the object and wrap it with an appropriate\n    class. If the object is not a string will try to wrap it with an appropriate class. If the object is not of a known type, it is returned unchanged.\n    The possible wrapper classes are:\n    - [`BaseWrapper`][pytekla.wrappers.BaseWrapper]: The base wrapper class that other wrappers inherit from. Can wrap any object in the Tekla.Structures namespace.\n    - [`ModelObjectWrapper`][pytekla.wrappers.ModelObjectWrapper]: A wrapper for Tekla.Structures.Model.ModelObject subclasses instances.\n    - [`ModelWrapper`][pytekla.wrappers.ModelWrapper]: A wrapper for Tekla.Structures.Model.Model instances.\n    - [`DrawingDbObjectWrapper`][pytekla.wrappers.DrawingDbObjectWrapper]: A wrapper for Tekla.Structures.Drawing.DatabaseObject subclasses instances.\n    - [`DrawingHandlerWrapper`][pytekla.wrappers.DrawingHandlerWrapper]: A wrapper for Tekla.Structures.Drawing.DrawingHandler instances.\n    Examples\n    --------\n    &gt;&gt;&gt; wrapped_obj = wrap(\"Model.Model\")\n    &gt;&gt;&gt; # ModelWrapper instance\n    &gt;&gt;&gt; wrapped_obj = wrap(\"Model.Beam\")\n    &gt;&gt;&gt; # ModelObjectWrapper\n    &gt;&gt;&gt; from Tekla.Structures.Model import Beam\n    &gt;&gt;&gt; wrapped_obj = wrap(Beam())\n    &gt;&gt;&gt; # ModelObjectWrapper\n    \"\"\"\nunwrapped_args = [a.unwrap() if isinstance(a, BaseWrapper) else a for a in args]\nif inspect.isclass(some_object):\nreturn some_object\nif detect_types:\nif isinstance(some_object, str):\nif \"Enum\" in some_object:\nsome_object_splitted = some_object.split(\".\")\nsome_object = \".\".join(some_object_splitted[:-1])\nsome_object_type = _get_type_by_namespace(some_object)\nreturn BaseWrapper(getattr(some_object_type, some_object_splitted[-1]))\nsome_object_type = _get_type_by_namespace(some_object)\nclr_type = clr.GetClrType(some_object_type)\nif clr_type.IsAbstract and clr_type.IsSealed:\nreturn BaseWrapper(some_object_type)\nsome_object = some_object_type(*unwrapped_args)\nclass_to_use = None\nfor subclass in BaseWrapper.__subclasses__():\nif isinstance(some_object, subclass.main_type):\nclass_to_use = subclass\nnew_instance = None\nif class_to_use is not None:\nnew_instance = class_to_use(some_object)\nreturn new_instance\ncls_name = str(some_object.__class__)\nif \"Tekla.Structures\" in cls_name:\nnew_instance = BaseWrapper(some_object)\nreturn new_instance\nreturn some_object\n</code></pre>"},{"location":"api_reference/#data-manager","title":"Data manager","text":""},{"location":"api_reference/#pytekla.data_manager.create_model_objects_dataframe","title":"<code>create_model_objects_dataframe(objects, report_properties=None, user_properties=None, attributes=None, use_all_user_properties=False)</code>","text":"<p>Create a pandas DataFrame from objects based on provided properties and attributes.</p> <p>Parameters:</p> Name Type Description Default <code>objects</code> <code>iterable of ModelObjectWrapper</code> <p>A iterable of objects to be transformed into a DataFrame.</p> required <code>report_properties</code> <code>dict, optional</code> <p>A dictionary of report properties to be extracted from each object, with key being the report property name and value being the report property type. Default is None.</p> <code>None</code> <code>user_properties</code> <code>dict, optional</code> <p>A dictionary of user properties to be extracted from each object, with key being the user property name and value being the user property type. Default is None.</p> <code>None</code> <code>attributes</code> <code>list, optional</code> <p>A list of object attributes to be extracted from each object. Default is None.</p> <code>None</code> <code>use_all_user_properties</code> <code>bool, optional</code> <p>A flag indicating if all user properties should be extracted from each object. If set to True, the <code>user_properties</code> parameter will be ignored. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A pandas DataFrame containing the extracted information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objects = [obj1, obj2, obj3]\n&gt;&gt;&gt; report_properties = {'prop1': int, 'prop2': str}\n&gt;&gt;&gt; user_properties = {'prop3': float, 'prop4': str}\n&gt;&gt;&gt; attributes = ['attr1', 'attr2', 'attr2.attr3']\n&gt;&gt;&gt; create_dataframe(objects, report_properties, user_properties, attributes)\n    prop1 prop2  prop3 prop4  attr1  attr2  attr3\n    0     1    A   3.14    B1   1.0   0.5   0.7\n    1     2    C   6.28    B2   2.0   1.0   1.1\n    2     3    E   9.42    B3   3.0   1.5   1.5\n</code></pre> Source code in <code>pytekla\\data_manager.py</code> <pre><code>def create_model_objects_dataframe(\nobjects,\nreport_properties=None,\nuser_properties=None,\nattributes=None,\nuse_all_user_properties=False,\n):\n\"\"\"\n    Create a pandas DataFrame from objects based on provided properties and attributes.\n    Parameters\n    ----------\n    objects : iterable of ModelObjectWrapper\n        A iterable of objects to be transformed into a DataFrame.\n    report_properties : dict, optional\n        A dictionary of report properties to be extracted from each object, with key being the report property name and value being the report property type. Default is None.\n    user_properties : dict, optional\n        A dictionary of user properties to be extracted from each object, with key being the user property name and value being the user property type. Default is None.\n    attributes : list, optional\n        A list of object attributes to be extracted from each object. Default is None.\n    use_all_user_properties : bool, optional\n        A flag indicating if all user properties should be extracted from each object. If set to True, the `user_properties` parameter will be ignored. Default is False.\n    Returns\n    -------\n    pd.DataFrame\n        A pandas DataFrame containing the extracted information.\n    Examples\n    --------\n    &gt;&gt;&gt; objects = [obj1, obj2, obj3]\n    &gt;&gt;&gt; report_properties = {'prop1': int, 'prop2': str}\n    &gt;&gt;&gt; user_properties = {'prop3': float, 'prop4': str}\n    &gt;&gt;&gt; attributes = ['attr1', 'attr2', 'attr2.attr3']\n    &gt;&gt;&gt; create_dataframe(objects, report_properties, user_properties, attributes)\n        prop1 prop2  prop3 prop4  attr1  attr2  attr3\n        0     1    A   3.14    B1   1.0   0.5   0.7\n        1     2    C   6.28    B2   2.0   1.0   1.1\n        2     3    E   9.42    B3   3.0   1.5   1.5\n    \"\"\"\ndata = []\nfor obj in objects:\nobj_data = {}\nif report_properties:\nfor report_prop_name, report_prop_type in report_properties.items():\nobj_data[report_prop_name] = obj.get_report_property(\nreport_prop_name, report_prop_type\n)\nif user_properties or use_all_user_properties:\nif use_all_user_properties:\nobj_data |= obj.get_all_user_properties()\nelse:\nfor user_prop_name, user_prop_type in user_properties.items():\nobj_data[user_prop_name] = obj.get_user_property(\nuser_prop_name, user_prop_type\n)\nif attributes:\nfor attr in attributes:\nattrs = attr.split(\".\")\ncurrent_obj = obj\nfor at in attrs:\ncurrent_obj = getattr(current_obj, at, None)\nif callable(current_obj):\ncurrent_obj = current_obj()\nobj_data[attr] = current_obj\ndata.append(obj_data)\nreturn pd.DataFrame(data)\n</code></pre>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#credits","title":"Credits","text":"<p>PyTekla is using these awesome projects:</p> <ul> <li>Python.Net</li> <li>Pandas</li> <li>Material for MkDocs</li> <li>MkDocsStrings-Python</li> <li>Hatch</li> <li>Black</li> </ul>"},{"location":"first_steps/","title":"First Steps","text":""},{"location":"first_steps/#setting-the-path-to-the-tekla-structures-bin-folder","title":"Setting the Path to the Tekla Structures bin Folder","text":"<p>When using PyTekla for the first time, it is necessary to set the directory path to the Tekla Structures bin folder. To do that, you need to import a function called <code>set_tekla_path</code>. </p> <pre><code>&gt;&gt;&gt; from pytekla.config import set_tekla_path\n&gt;&gt;&gt; set_tekla_path(\"C:\\\\TeklaStructures\\\\2022.0\\\\bin\")\n</code></pre> <p>You need to do this just once or when you want to work with another Tekla Structures version.</p> <p>After this you are all set to start coding in PyTekla!</p>"},{"location":"first_steps/#using-pytekla","title":"Using PyTekla","text":"<p>After importing PyTekla you will have access to all the Tekla Open API library:</p> <pre><code>import pytekla\nfrom Tekla.Structures.Model import Model, Beam\n</code></pre> <p>There are two ways to use the Tekla Open API library with PyTekla. The first option is to use the library directly, while the second option is to use the wrappers provided by PyTekla.</p>"},{"location":"first_steps/#examples","title":"Examples","text":"<p>Let's take a look at how each of these options works using an example to get some objects from the model and read properties from one of them.</p> Without PyTekla wrappersWith PyTekla wrappers <pre><code>import clr\nimport pytekla\nfrom System.Collections import Hashtable, ArrayList\nfrom Tekla.Structures.Model import Model, Part, Weld\nmodel = Model()\n# Check model connection status\nif not model.GetConnectionStatus():\nprint(\"Cannot connect with Tekla model\")\nsys.exit()\n# Get all Assembly and Part objects\nmodel_object_selector = model.GetModelObjectSelector()\n# We need to get the .NET types to use in this method\ntypes = [clr.GetClrType(t) for t in (Assembly, Part)]\nobjects_enumerator = model_object_selector.GetAllObjectsWithType(types)\n# objects is a ModelObjectEnumerator [https://developer.tekla.com/tekla-structures/api/22/14457]\n# We may want to have a Python list with all these objects for other purposes\nobjects_list = [o for o in objects_enumerator]\n# Grab first object to get some information\n# obj is instance of a ModelObject subclass [https://developer.tekla.com/tekla-structures/api/22/14416]\nobj = objects_list[0]\n# Get all user properties\nuser_hash_table = Hashtable()\nobj.GetAllUserProperties(hash_table)\n# We have a .NET Hashtable [https://learn.microsoft.com/en-us/dotnet/api/system.collections.hashtable?view=net-7.0]\n# For future use, we may want to convert it to a Python dictionary\nuser_properties_dict = {k: v for k, v in zip(user_hash_table.Keys, user_hash_table.Values)}\n# Get some report properties\nreport_hash_table = Hashtable()\nstr_names = ArrayList()\nstr_names.Add(\"MATERIAL\")\nstr_names.Add(\"FINISH\")\ndouble_names = ArrayList()\ndouble_names.Add(\"WEIGHT\")\nint_names = ArrayList()\nint_names.Add(\"GROUP_ID\")\n# The name of the method is confusing, it only gets the specified properties\nobj.GetAllReportProperties(str_names, double_names, int_names, report_hash_table)\n# Convert to Python Dict for future use\nreport_properties_dict = {k: v for k, v in zip(report_hash_table.Keys, report_hash_table.Values)}\n</code></pre> <pre><code>from pytekla import wrapper\nmodel = wrapper(\"Model.Model\")\n# Check model connection status\nif not model.get_connection_status():\nprint(\"Cannot connect with Tekla model\")\nsys.exit()\n# Get all Assembly and Part objects\n# PyTekla will find the type names in the Tekla.Structures.Model namespace [https://developer.tekla.com/tekla-structures/api/22/13460]\nobjects_generator = model.get_objects_with_types((\"Assembly\", \"Part\"))\n# objects is a native Python generator \nobjects_list = list(objects_generator)\n# Grab first object to get some information\n# obj is instance of a PyTekla ModelObjectWrapper \nobj = objects_list[0]\n# Get all user properties\nuser_properties_dict = obj.get_all_user_properties()\n# Get some report properties\nreport_properties_dict = obj.get_multiple_report_properties(\nstring_names=[\"MATERIAL\", \"FINISH\"],\nfloat_names=[\"WEIGHT\"],\nint_names=[\"GROUP_ID\"]\n)\n</code></pre> <p>Note</p> <p>As per the Tekla Open API documentation, if the connection to Tekla Structures is lost it cannot be re-established. To get the model connected you can try to run Tekla Structures as Admisnitrator.</p>"},{"location":"first_steps/#how-the-wrappers-work","title":"How the wrappers work","text":"<p>A wrapper is an object that encapsulates and contains another object. It allows the wrapped object to be accessed and used through the wrapper. The wrapper can provide additional functionality and services.</p> <p>PyTekla provides five types of wrappers:</p> <ul> <li><code>BaseWrapper</code></li> <li><code>ModelObjectWrapper</code></li> <li><code>ModelWrapper</code></li> <li><code>DrawingDbObjectWrapper</code></li> <li><code>DrawingHandlerWrapper</code></li> </ul> <p>Those wrappers provide a more 'pythonic' experience when working with the Tekla Open API. You can check their documentation in the API Reference section.</p> <p>You can use directly those wrappers or use the handy <code>wrap</code> function. This function will wrap any Tekla Structures object. Let see an example:</p> <pre><code>from pytekla import wrap\nfrom Tekla.Structures.Model import Material, Beam\n# This will return a 'BaseWrapper' object.\nmaterial = wrap(Material())\n# This will return a 'ModelObjectWrapper' object.\nbeam = wrap(Beam())\n</code></pre> <p>Alternatively, you can use strings to instanciate the objects:</p> <pre><code>from tekla import wrap\n# This will find, instanciate and wrap the type Tekla.Structures.Model.Material\nmaterial = wrap(\"Model.Material\")\n# This will find, instanciate and wrap the type Tekla.Structures.Model.Beam\nbeam = wrap(\"Model.Beam\")\n</code></pre> <p>For more examples check this section.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#installing-pytekla","title":"Installing PyTekla","text":"<p>PyTekla is available on PyPI:</p> <pre><code>pip install pytekla\n</code></pre> <p>Optionally you can install PyTekla along the libraries for data management (for example, pandas): <pre><code>pip install pytekla[data]\n</code></pre> or the \"dev\" version: <pre><code>pip install pytekla[dev]\n</code></pre></p> <p>PyTekla officially supports Python 3.11+.</p>"},{"location":"install/#other-requeriments","title":"Other requeriments","text":"<p>Keep in mind that you'll need a Tekla Structures installed in your machine.</p> <p>Note</p> <p>It is recommended to work with virtual environments.</p>"},{"location":"install/#total-beginners-guide","title":"Total beginners guide","text":""},{"location":"install/#installing-python","title":"Installing Python","text":"<p>Go to Python.org and download the last Python version.</p> <p></p> <p>Run the installer and make sure you have checked the \"ADD python.exe to PATH\" checkbox during the installation.</p> <p></p>"},{"location":"install/#installing-the-ide-integrated-development-environment","title":"Installing the IDE (Integrated Development Environment)","text":"<p>We are gonna use PyCharm, because we think PyCharm is good for beginners because it offers an intuitive and supportive environment for learning and practicing Python programming.</p> <p>Got to Jetbrains and download PyCharm Community</p> <p></p> <p>Install it and run it. Select \"New Project\".</p> <p></p> <p>Configure the new project and make sure you are creating a \"virtual environment\" for this project [Steps 2 and 3].</p> <p></p> <p>Open the terminal.</p> <p></p> <p>Open the CMD.</p> <p></p> <p>Install PyTekla</p> <pre><code>pip install pytekla\n</code></pre> <p></p> <p>After this you are all set! Follow the First Steps section to start coding with PyTekla.</p>"},{"location":"install/#what-next","title":"What next?","text":"<p>In order to use PyTekla you'll need some basic Python knowledge. Check out the following resources for beginners:</p> <ul> <li>Automate the Boring Stuff with Python</li> <li>Corey Schafer - Youtube Channel</li> </ul>"},{"location":"license/","title":"The MIT License (MIT)","text":"<p>Copyright \u00a9 <code>2023</code> <code>Natalia Alvarado, Eduardo Di Loreto</code></p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"examples/GUI/","title":"GUI","text":""},{"location":"examples/GUI/#display-prompt","title":"Display prompt","text":"<pre><code>import sys\nfrom pytekla import wrap\nmodel = wrap(\"Model.Model\")\noperation = wrap(\"Model.Operations.Operation\")\nif not model.get_connection_status():\nprint(\"Cannot connect with Tekla model\")\nsys.exit()\noperation.display_prompt(\"Some message\")\n</code></pre>"},{"location":"examples/creation/","title":"Creation","text":""},{"location":"examples/creation/#model-creation","title":"Model Creation","text":""},{"location":"examples/creation/#single-beam","title":"Single beam","text":"<pre><code>import sys\nfrom pytekla import wrap\nmodel = wrap(\"Model.Model\")\nif not model.get_connection_status():\nprint(\"Cannot connect with Tekla model\")\nsys.exit()\nmaterial = wrap(\"Model.Material\")\nmaterial.material_string = \"A36\"\nbeam_profile = wrap(\"Model.Profile\")\nbeam_profile.profile_string = \"W310X107\"\nbeam_position = wrap(\"Model.Position\")\nbeam_position.rotation_offset = 90\nbeam_position.depth = wrap(\"Model.Position.DepthEnum\").BEHIND\nbeam = wrap(\"Model.Beam\")\nbeam.start_point = wrap(\"Geometry3d.Point\", 0.0, 0.0, 0.0)\nbeam.end_point = wrap(\"Geometry3d.Point\", 5000.0, 0.0, 0.0)\nbeam.name = \"PYTEKLA BEAM\"\nbeam._class = \"42\"  # Cannot use \"class\" in lowercase\nbeam.profile = beam_profile\nbeam.material = material\nbeam.position = beam_position\nbeam.deforming_data.cambering = 100\nbeam.insert()\nmodel.commit_changes(\"Beam creation\")\n</code></pre>"},{"location":"examples/creation/#rectangular-grid","title":"Rectangular grid","text":"<pre><code>import itertools\nfrom string import ascii_uppercase\nimport numpy as np\nfrom pytekla import wrap\ndef letters():\nn = 1\nwhile True:\nyield from (\n\"\".join(group) for group in itertools.product(ascii_uppercase, repeat=n)\n)\nn += 1\nmodel = wrap(\"Model.Model\")\nx_y_step = 5000\nz_step = 3000\nx_axis = np.arange(0, 20000 + x_y_step, x_y_step)\ny_axis = np.arange(0, 50000 + x_y_step, x_y_step)\nz_levels = np.arange(0, 9000 + z_step, z_step)\ngrid = wrap(\"Model.Grid\")\ngrid.coordinate_x = \" \".join(str(x) for x in np.diff(x_axis, prepend=0))\ngrid.coordinate_y = \" \".join(str(y) for y in np.diff(y_axis, prepend=0))\ngrid.coordinate_z = \" \".join(str(z) for z in np.diff(z_levels, prepend=0))\ngrid.label_x = \" \".join(str(x + 1) for x in range(len(x_axis)))\ngrid.label_y = \" \".join(itertools.islice(letters(), len(y_axis)))\ngrid.label_z = \" \".join(f\"+{z}\" for z in z_levels)\ngrid.insert()\nmodel.commit_changes(\"Add Rectangular Grid\")\n</code></pre>"},{"location":"examples/creation/#radial-grid","title":"Radial grid","text":"<pre><code>import itertools\nfrom math import degrees\nfrom string import ascii_uppercase\nimport numpy as np\nfrom pytekla import wrap\ndef letters():\nn = 1\nwhile True:\nyield from (\n\"\".join(group) for group in itertools.product(ascii_uppercase, repeat=n)\n)\nn += 1\nmodel = wrap(\"Model.Model\")\nn_points = 25\nradius = np.arange(5000, 25000, 5000)\nangles = np.linspace(0, 2 * np.pi, n_points)\ndegrees_angles = np.array([degrees(x) for x in angles])\nn_floors = 5\nfloor_height = 5000\nz_levels = np.arange(\n0, floor_height * n_floors + floor_height, floor_height, dtype=float\n)\nradial_grid = wrap(\"Model.RadialGrid\")\nradial_grid.angular_coordinates = \" \".join(\nstr(angle) for angle in np.diff(degrees_angles, prepend=0)\n)\nradial_grid.coordinate_z = \" \".join(str(z) for z in z_levels)\nradial_grid.radial_coordinates = \" \".join(str(x) for x in radius)\nradial_grid.angular_labels = \" \".join(itertools.islice(letters(), len(degrees_angles)))\nradial_grid.label_z = \" \".join(f\"+{str(z)}\" for z in z_levels)\nradial_grid.radial_labels = \" \".join(str(i) for i, _ in enumerate(radius, start=1))\nradial_grid.insert()\nmodel.commit_changes(\"Add Radial Grid\")\n</code></pre>"},{"location":"examples/creation/#drawing-creation","title":"Drawing Creation","text":""},{"location":"examples/creation/#single-drawing","title":"Single drawing","text":"<pre><code>from pytekla import wrap\na3_size = wrap(\"Drawing.Size\", 410.0, 287.0)\nlayout_attributes = wrap(\"Drawing.LayoutAttributes\")\nlayout_attributes.sheet_size = a3_size\nga_drawing = wrap(\"Drawing.GADrawing\")\nga_drawing.name = \"PyTekla Drawing\"\nga_drawing.layout = layout_attributes\nga_drawing.title1 = \"Awesome drawing\"\nga_drawing.insert()\n</code></pre>"},{"location":"examples/data/","title":"Data","text":""},{"location":"examples/data/#dataframes","title":"Dataframes","text":"<p>Retrieve elements from the model using an existing filter, create a Pandas dataframe, group the elements by Material, Profile and Name, calculate the total weight for each group, and export the result to an Excel file.</p> <pre><code>from pytekla import wrap\nfrom pytekla.data_manager import create_model_objects_dataframe\nmodel = wrap(\"Model.Model\")\nsteel_parts = model.get_objects_by_filter(\"Steel_Main_Part-All\")\nreport_properties = { \n\"PROFILE\": str,\n\"MATERIAL\": str,\n\"WEIGHT_NET\": float,\n}\nattributes = [\"name\"]\ndataframe = create_model_objects_dataframe(steel_parts, report_properties=report_properties, attributes=attributes)\ndataframe = dataframe.rename(columns={\"PROFILE\": \"PROFILE\", \"MATERIAL\": \"MATERIAL\", \"name\": \"NAME\", \"WEIGHT_NET\": \"WEIGHT [kG]\"})\ngrouped_dataframe = dataframe.groupby([\"MATERIAL\", \"PROFILE\", \"NAME\"]).agg({\"WEIGHT [kG]\": \"sum\"})\ngrouped_dataframe.to_excel(\"dataframe.xlsx\")\n</code></pre>"},{"location":"examples/geometry/","title":"Geometry","text":""},{"location":"examples/geometry/#check-if-two-beams-are-parallel","title":"Check if two beams are parallel","text":"<pre><code>import sys\nfrom pytekla import wrap\nmodel = wrap(\"Model.Model\")\noperation = wrap(\"Model.Operations.Operation\")\nif not model.get_connection_status():\nprint(\"Cannot connect with Tekla model\")\nsys.exit()\nwhile True:\nbeams = tuple(model.pick_objects(object_type=\"part\", prompt=\"Pick two beams\"))\nif len(beams) != 2 or not all((\"Beam\" in str(b) for b in beams)):\ncontinue\nlines = tuple(wrap(\"Geometry3d.Line\", b.start_point, b.end_point) for b in beams)\nparallel = wrap(\"Geometry3d.Parallel\")\nif parallel.line_to_line(*lines):\noperation.display_prompt(\"Beams are parallel\")\nelse:\noperation.display_prompt(\"Beams are not parallel\")\nbreak\n</code></pre>"},{"location":"examples/modification/","title":"Modification","text":""},{"location":"examples/modification/#model","title":"Model","text":""},{"location":"examples/modification/#change-part-names","title":"Change part names","text":"<pre><code>import sys\nfrom pytekla import wrap\nmodel = wrap(\"Model.Model\")\nif not model.get_connection_status():\nprint(\"Cannot connect with Tekla model\")\nsys.exit()\nparts = model.pick_objects(object_type=\"part\", prompt=\"Pick some parts\")\nfor part in parts:\npart.name = \"NEW COOL NAME\"\npart._class = \"42\"\npart.modify()\nmodel.commit_changes(\"Modify parts\")\n</code></pre>"},{"location":"examples/selection/","title":"Selection","text":""},{"location":"examples/selection/#model-selection","title":"Model Selection","text":""},{"location":"examples/selection/#pick-objects","title":"Pick objects","text":"<pre><code>from pytekla import wrap\nmodel = wrap(\"Model.Model\")\n# The returned value is a 'ModelObjectWrapper' Python generator\npicked_objects = model.pick_objects(object_type=\"part\", prompt=\"Select parts from the model\")\n</code></pre>"},{"location":"examples/selection/#get-all-objects","title":"Get all objects","text":"<pre><code>from pytekla import wrap\nmodel = wrap(\"Model.Model\")\n# The returned value is a 'ModelObjectWrapper' Python generator\nall_objects = model.get_all_objects()\n</code></pre>"},{"location":"examples/selection/#get-selected-objects","title":"Get selected objects","text":"<pre><code>from pytekla import wrap\nmodel = wrap(\"Model.Model\")\n# The returned value is a 'ModelObjectWrapper' Python generator\nselected_objects = model.get_selected_objects()\n</code></pre>"},{"location":"examples/selection/#get-objects-with-types","title":"Get objects with types","text":"<pre><code>from pytekla import wrap\nmodel = wrap(\"Model.Model\")\n# The returned value is a 'ModelObjectWrapper' Python generator\nobjects_with_types = model.get_objects_with_types([\"Beam\", \"Assembly\"])\n</code></pre>"},{"location":"examples/selection/#get-objects-by-filter","title":"Get objects by filter","text":"<pre><code>from pytekla import wrap\nmodel = wrap(\"Model.Model\")\n# The returned value is a 'ModelObjectWrapper' Python generator\nobjects_by_filter = model.get_objects_by_filter(\"Steel_All\")\n</code></pre>"},{"location":"examples/selection/#get-objects-by-bounding-box","title":"Get objects by bounding box","text":"<pre><code>from pytekla import wrap\nmodel = wrap(\"Model.Model\")\n# The returned value is a 'ModelObjectWrapper' Python generator\nobjects_by_bounding_box = model.get_objects_by_bounding_box((0, 0, 0), (5000, 5000, 5000))\n</code></pre>"},{"location":"examples/selection/#drawing-selection","title":"Drawing Selection","text":""},{"location":"examples/selection/#get-active-drawing","title":"Get active drawing","text":"<pre><code>from pytekla import wrap\ndrawing_handler = wrap(\"Drawing.DrawingHandler\")\n# DrawingDbObjectWrapper instance\nactive_drawing = drawing_handler.get_active_drawing()\n</code></pre>"},{"location":"examples/selection/#get-all-drawings","title":"Get all drawings","text":"<pre><code>from pytekla import wrap\ndrawing_handler = wrap(\"Drawing.DrawingHandler\")\ndrawings = drawing_handler.get_drawings()\n</code></pre>"}]}